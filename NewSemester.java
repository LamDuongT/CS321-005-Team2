
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author moo7md
 */
public class NewSemester extends javax.swing.JFrame {

    private Profile profile;
    private Plan plan;
    private final Courses coursesClass = new Courses();
    private int numberOfAddedCredit;

    /**
     * Creates new form NewSemester
     */
    public NewSemester() {
        initComponents();
    }

    public NewSemester(Profile profile, Plan plan) {
        initComponents();
        this.profile = profile;
        this.plan = plan;
        initCourseList();
        numberOfAddedCredit = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        semesterNametxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        counter = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Please complete the required fields");

        jLabel2.setText("Semester Name");

        semesterNametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semesterNametxtActionPerformed(evt);
            }
        });

        jButton1.setText("Done");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "ID", "Name", "Taken"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jLabel3.setText("Search");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jLabel4.setText("Number of credits:");

        counter.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(semesterNametxt)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(counter)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(semesterNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(counter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void semesterNametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semesterNametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_semesterNametxtActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // adds the new semester into the database
        if (this.semesterNametxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please give this semester a name", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            ConnectDB connectdb = new ConnectDB();
            Semester sm;
            try {
                String semesterName = this.semesterNametxt.getText();
                Statement statement = connectdb.theConnection.createStatement();
                String query = "INSERT INTO collegespdb.tblsemester(semesterName,semesterDesc,creditMin,creditMax)VALUES";
                query = query.concat("(\"").concat(semesterName).concat("\", \"").concat(semesterName).concat("\",")
                        .concat("0,18);");
                statement.executeUpdate(query);
                query = "SELECT LAST_INSERT_ID() as semesterID";
                ResultSet ResultSet = statement.executeQuery(query);
                int id = 9999;
                while (ResultSet.next()) {
                    id = ResultSet.getInt("semesterID");
                }
                sm = new Semester(id, semesterName, semesterName, 0, 18, new ArrayList<>());
                System.out.println(semesterName + " was added to database");
            } catch (SQLException ex) {
                throw new RuntimeException(ex.getLocalizedMessage());
            } finally {
                connectdb.disconectDB();
            }
            TableModel model = this.jTable1.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                if ((boolean) model.getValueAt(i, 2)) {
                    Course acourse = coursesClass.getCourseByName((String) model.getValueAt(i, 0));
                    plan.addCourseToSemester(acourse, sm);
                }
            }
            this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // closes the window
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // if a class was selected check if it 
        /*
        FIX THE CHECKED ITEMS BY CHENHING THE ISTAKEN VALUE
        */
        boolean isSelected = (boolean) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn());
        String courseName = (String) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
        Course aCourse = plan.getCoursesList().getCourseByName(courseName);
        if((numberOfAddedCredit+aCourse.getCreditHours())>18){
            JOptionPane.showMessageDialog(this, "You have exceeded the max credit allowed", "Max Credit Error", JOptionPane.ERROR_MESSAGE);
            jTable1.setValueAt(false, jTable1.getSelectedRow(), 2);
            return;
        }
        if (isSelected) {
            if (profile.getCoursesTaken().contains(aCourse.getCourseID())) {
                JOptionPane.showMessageDialog(this, "You already took this course", "Reminder", JOptionPane.INFORMATION_MESSAGE);
                 numberOfAddedCredit += aCourse.getCreditHours();
                this.counter.setText("" + numberOfAddedCredit);
                int i = coursesClass.getCoursesList().indexOf(aCourse);
                coursesClass.getCoursesList().get(coursesClass.getCoursesList().indexOf(aCourse)).setTaken(true);
            } else if (!plan.checkPrerequisites(aCourse)) {
                String listOfPrerq = "";
                for (Prereq pre : aCourse.getPrereqList().getPrereqList()) {
                    listOfPrerq = listOfPrerq.concat(pre.getPrereqCourseName()).concat("\n");
                }
                JOptionPane.showMessageDialog(this, "You can't take this class\nYou have to take these courses first:\n"
                        + listOfPrerq, "Reminder", HEIGHT);
                jTable1.setValueAt(false, jTable1.getSelectedRow(), 2);
                coursesClass.getCoursesList().get(coursesClass.getCoursesList().indexOf(aCourse)).setTaken(false);
            } else {
                coursesClass.getCoursesList().get(coursesClass.getCoursesList().indexOf(aCourse)).setTaken(true);
                numberOfAddedCredit += aCourse.getCreditHours();
                this.counter.setText("" + numberOfAddedCredit);
            }
        } else if (!counter.getText().equals("0")) {
            numberOfAddedCredit -= aCourse.getCreditHours();
            this.counter.setText("" + numberOfAddedCredit);
            coursesClass.getCoursesList().get(coursesClass.getCoursesList().indexOf(aCourse)).setTaken(false);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        //creates the list of courses or reset it
        initCourseList();
        //target string
        String target = jTextField1.getText() + ((Character.isLetter(evt.getKeyChar())
                || Character.isDigit(evt.getKeyChar())) ? evt.getKeyChar() : "");
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String valueAtCol0 = (String) model.getValueAt(i, 0);
            String valueAtCol1 = (String) model.getValueAt(i, 1);
            if (!(valueAtCol0.contains(target) || valueAtCol1.contains(target))) {
                model.removeRow(i);
                i = -1;
            }
        }
        model.fireTableDataChanged();
    }//GEN-LAST:event_jTextField1KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewSemester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewSemester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewSemester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewSemester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewSemester().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel counter;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField semesterNametxt;
    // End of variables declaration//GEN-END:variables

    private void initCourseList() {
        List<Course> courses = coursesClass.getCoursesList();
        //      courses.removeAll(profile.getCoursesTaken().creditsTakenList);
        this.jTable1.setModel(new DefaultTableModel(new String[]{"ID", "Name", "Choose"}, 0) {
            @Override
            public java.lang.Class<?> getColumnClass(int index) {
                return getValueAt(0, index).getClass();
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                return col == 2;
            }
        });
        //Courses c = new Courses();
        DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
        courses.forEach((classs) -> {
            model.addRow(new Object[]{((Course) classs).getCourseName(), ((Course) classs).getCourseDesc(), ((Course)classs).isTaken()});
        });
    }

    public int getNumberOfAddedCredit() {
        return this.numberOfAddedCredit;
    }
}
